/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.voice.Intent
import org.xtext.example.mydsl.voice.Entity
import org.xtext.example.mydsl.voice.Reference

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VoiceGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//val entity = resource.allContents.filter(Entity).next
		
		resource.allContents.filter(Entity).forEach[generateEntityFile(fsa)]			
		resource.allContents.filter(Intent).forEach[generateIntentFile(fsa)]	
	}
	
	def generateEntityFile(Entity entity, IFileSystemAccess2 fsa) {
		fsa.generateFile(entity.name + "_entries_en.json",entity.generateEntityEntries)
		fsa.generateFile(entity.name + ".json", entity.generateEntity)
	}
	
	def generateIntentFile(Intent intent, IFileSystemAccess2 fsa) {
		fsa.generateFile(intent.name + ".json", intent.generateIntent)
	}
	
	def CharSequence generateIntent(Intent intent)
		'''
		{
		"id": "«36.generateId»",
		"name": "«intent.name»",
		"auto": true,
		«if (intent.isFollowup !== null) {
			'''"contexts": [
			    "«intent.isFollowup.intent.name»-followup"
			  ],
			  "responses": [
			  					{
			  					"resetContexts": false,
			  					"action": ""
			  					"affectedContexts":[],'''
		} else if (intent.hasFollowup !== null) {
			'''
			"contexts": [],
			"responses": [
					{
					"resetContexts": false,
					"affectedContexts": [
			        {
			          "name": "«intent.name»-followup",
			          "parameters": {},
			          "lifespan": 2
			        }
			        ],
			        '''     
		}»
			"parameter": [
		«FOR parameter: intent.question»
		{ 
		          "id": "«36.generateId»",
		          "required": «if( parameter.required === null ) '''false''' else '''true'''»
		          "dataType": "@«parameter.questionEntity.withEntity.getEntityType»",
		          "name": "«parameter.questionEntity.withEntity.getEntityType»",
		          "value": "$«parameter.questionEntity.withEntity.getEntityType»",
		          "prompts": [
		            {
		              "lang": "en",
		              "value": "«parameter.prompt»"
		            }
		          ],
		          "promptMessages": [],
		          "noMatchPromptMessages": [],
		          "noInputPromptMessages": [],
		          "outputDialogContexts": [],
		          "isList": false
		        },
		«ENDFOR»
		],
		      "messages": [
		        {
		          "type": 0,
		          "lang": "en",
		          "condition": "",
		          "speech": []
		        }
		      ],
		      "defaultResponsePlatforms": {},
		      "speech": []
		    }
		  ],
		  "priority": 500000,
		  "webhookUsed": true,
		  "webhookForSlotFilling": false,
		  "fallbackIntent": false,
		  "events": [],
		  "conditionalResponses": [],
		  "condition": "",
		  "conditionalFollowupEvents": []
		}
		'''
		
	def CharSequence generateFollowupIntent(Intent intent) '''
	'''
	
	def CharSequence generateRegularIntent(Intent intent) '''
	'''
		
	
	def String getEntityType(Reference ref) {
		if (ref.entity !== null)
			ref.entity.name
		else if (ref.sysvar !== null)
			"sys." + ref.sysvar.value
	}
	
	def CharSequence generateEntityEntries(Entity entity) '''
	[
	«FOR example: entity.example»
	  {
	    "value": "«example.name»",
	    "synonyms": [
	      ""
	    ]
	  },
	«ENDFOR»
	]
	'''
	
	
	def CharSequence generateEntity(Entity entity) '''
	{
	  "id": "«36.generateId»",
	  "name": "«entity.name»",
	  "isOverridable": true,
	  "isEnum": false,
	  "isRegexp": false,
	  "automatedExpansion": false,
	  "allowFuzzyExtraction": true
	}
	'''
	val ALPHA_NUMERIC_STRING = "abcdefghijklmnopqrstuvxyz0123456789-"
	def String generateId(int count) {
		var c = count
    	var id = ""
    	while (c-- != 0) {
        	val character = (Math.random() * ALPHA_NUMERIC_STRING.length).intValue
        	id += (ALPHA_NUMERIC_STRING.charAt(character))
    }
   		id
	}
	
}