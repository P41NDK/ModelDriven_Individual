/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.voice.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.voice.Question;
import org.xtext.example.mydsl.voice.QuestionReference;
import org.xtext.example.mydsl.voice.VoicePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Question Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.voice.impl.QuestionReferenceImpl#getQuestion <em>Question</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.voice.impl.QuestionReferenceImpl#getQuestionReference <em>Question Reference</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QuestionReferenceImpl extends MinimalEObjectImpl.Container implements QuestionReference
{
  /**
   * The cached value of the '{@link #getQuestion() <em>Question</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuestion()
   * @generated
   * @ordered
   */
  protected Question question;

  /**
   * The cached value of the '{@link #getQuestionReference() <em>Question Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuestionReference()
   * @generated
   * @ordered
   */
  protected Question questionReference;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QuestionReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VoicePackage.Literals.QUESTION_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Question getQuestion()
  {
    return question;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQuestion(Question newQuestion, NotificationChain msgs)
  {
    Question oldQuestion = question;
    question = newQuestion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VoicePackage.QUESTION_REFERENCE__QUESTION, oldQuestion, newQuestion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuestion(Question newQuestion)
  {
    if (newQuestion != question)
    {
      NotificationChain msgs = null;
      if (question != null)
        msgs = ((InternalEObject)question).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VoicePackage.QUESTION_REFERENCE__QUESTION, null, msgs);
      if (newQuestion != null)
        msgs = ((InternalEObject)newQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VoicePackage.QUESTION_REFERENCE__QUESTION, null, msgs);
      msgs = basicSetQuestion(newQuestion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VoicePackage.QUESTION_REFERENCE__QUESTION, newQuestion, newQuestion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Question getQuestionReference()
  {
    if (questionReference != null && questionReference.eIsProxy())
    {
      InternalEObject oldQuestionReference = (InternalEObject)questionReference;
      questionReference = (Question)eResolveProxy(oldQuestionReference);
      if (questionReference != oldQuestionReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, VoicePackage.QUESTION_REFERENCE__QUESTION_REFERENCE, oldQuestionReference, questionReference));
      }
    }
    return questionReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Question basicGetQuestionReference()
  {
    return questionReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuestionReference(Question newQuestionReference)
  {
    Question oldQuestionReference = questionReference;
    questionReference = newQuestionReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VoicePackage.QUESTION_REFERENCE__QUESTION_REFERENCE, oldQuestionReference, questionReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VoicePackage.QUESTION_REFERENCE__QUESTION:
        return basicSetQuestion(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VoicePackage.QUESTION_REFERENCE__QUESTION:
        return getQuestion();
      case VoicePackage.QUESTION_REFERENCE__QUESTION_REFERENCE:
        if (resolve) return getQuestionReference();
        return basicGetQuestionReference();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VoicePackage.QUESTION_REFERENCE__QUESTION:
        setQuestion((Question)newValue);
        return;
      case VoicePackage.QUESTION_REFERENCE__QUESTION_REFERENCE:
        setQuestionReference((Question)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VoicePackage.QUESTION_REFERENCE__QUESTION:
        setQuestion((Question)null);
        return;
      case VoicePackage.QUESTION_REFERENCE__QUESTION_REFERENCE:
        setQuestionReference((Question)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VoicePackage.QUESTION_REFERENCE__QUESTION:
        return question != null;
      case VoicePackage.QUESTION_REFERENCE__QUESTION_REFERENCE:
        return questionReference != null;
    }
    return super.eIsSet(featureID);
  }

} //QuestionReferenceImpl
