/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import java.util.ArrayList
import java.util.HashSet
import java.util.Iterator
import java.util.List
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.voice.Entity
import org.xtext.example.mydsl.voice.Intent
import org.xtext.example.mydsl.voice.Question
import org.xtext.example.mydsl.voice.Reference
import org.xtext.example.mydsl.voice.Sysvariable
import org.xtext.example.mydsl.voice.TrainingRef
import org.xtext.example.mydsl.voice.QuestionReference
import org.xtext.example.mydsl.voice.ReferenceObject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VoiceGenerator extends AbstractGenerator {
	var Set<IntentFollowUp> followUpInformation
	var ArrayList<Intent> intentsWithFollowup = new ArrayList<Intent>

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		followUpInformation = resource.allContents.filter(Intent).collectFollowUp
		
		resource.allContents.filter(Entity).forEach[generateEntityFile(fsa)]
		followUpInformation.forEach[generateIntentFile(fsa)]			
	}
	
	def generateEntityFile(Entity entity, IFileSystemAccess2 fsa) {
		fsa.generateFile(entity.name + "_entries_en.json",entity.generateEntityEntries)
		fsa.generateFile(entity.name + ".json", entity.generateEntity)
	}
	
	def generateIntentFile(IntentFollowUp intent, IFileSystemAccess2 fsa) {
		fsa.generateFile(intent.name + ".json", intent.generateIntent)
	}
	
	def CharSequence generateIntent(IntentFollowUp intent)
		'''
		{
		"id": "«generateUUID»",
		"name": "«intent.name»",
		"auto": true,
		«intent.generateFollowup»
			"parameters": [
		«FOR parameter: intent.question»
		{ 
		          "id": "«generateUUID»",
		          "required": "true",
		          "dataType": "@«parameter.questionEntity.withEntity.getEntityType»",
		          "name": "«parameter.questionEntity.withEntity.normalType»",
		          "value": "$«parameter.questionEntity.withEntity.normalType»",
		          "prompts": [
		            "«parameter.prompt»"
		          ],
		          "promptMessages": [],
		          "noMatchPromptMessages": [],
		          "noInputPromptMessages": [],
		          "outputDialogContexts": [],
		          "isList": false
		        } «if (parameter != intent.question.last) ''','''»
		«ENDFOR»
		],
		      "messages": [
		        {
		          "type": 0,
		          "lang": "en",
		          "condition": "",
		          "speech": []
		        }
		      ],
		      "defaultResponsePlatforms": {},
		      "speech": []
		    }
		  ],
		  "priority": 500000,
		  "webhookUsed": true,
		  "webhookForSlotFilling": false,
		  "fallbackIntent": false,
		  "events": [],
		  "conditionalResponses": [],
		  "condition": "",
		  "conditionalFollowupEvents": [],
		  "userSays": [
		  «FOR trainingRef : intent.training»
		  «trainingRef.generateTraining» «if (trainingRef !== intent.training.last) ''','''»
		  «ENDFOR»
		  ]
		}
		'''
	
	
	def CharSequence generateTraining(TrainingRef training){	
		'''
		{
		"isTemplate": false,
		"data": [
		{
		"text": "«training.phrase»",
		"userDefined": false
		},
		{
		"text": "«training.declarations.trainingstring»",
		"userDefined": true,
		"alias": "«training.declarations.reference.normalType»",
		"meta": "@«training.declarations.reference.entityType»"
		}
		],
		"count": 0,
		"updated": null
		}
		'''
	}
	
	def Set<IntentFollowUp> collectFollowUp(Iterator<Intent> intents){
		val result = new HashSet<IntentFollowUp>
		intents.forEach[item | 
			val questionList = new ArrayList<Question> 
			val referenceList = new ArrayList<ReferenceObject>
			val trainingList = new ArrayList<TrainingRef>
			trainingList.addAll(item.training.trainingref)
			for(QuestionReference qr : item.questions){
			questionList.add(qr.question?:qr.questionReference)
			if(qr.questionReference !== null){
				referenceList.add(qr.questionReference.questionEntity.withEntity.entity?:qr.questionReference.questionEntity.withEntity.sysvar)
			}
			
			}
			if(item.zuper !== null){
				for(TrainingRef training: item.zuper.training.trainingref){
				if(referenceList.contains(training.declarations.reference.entity)) trainingList.add(training)
				else if(training.declarations.reference.sysvar!== null) 
				for(Sysvariable ro : referenceList.filter(Sysvariable)){ 
				if(ro.defaultValue.equals((training.declarations.reference.sysvar as Sysvariable).defaultValue)) 
				trainingList.add(training)
				}
			}
			}
			result.add(new IntentFollowUp(item.name, item.isFollowup !== null ? item.isFollowup.intent : null, item, questionList ,trainingList, item.zuper))
			if(item.isFollowup !== null) 
				intentsWithFollowup.add(item.isFollowup.intent)
		]
		result
	}
	def String getEntityType(Reference ref) {
		if (ref.entity !== null)
			ref.entity.name
		else if (ref.sysvar !== null)
			"sys." + (ref.sysvar as Sysvariable).defaultValue
	}
	def String getNormalType(Reference ref) {
		if (ref.entity !== null)
			ref.entity.name
		else if (ref.sysvar !== null)
			(ref.sysvar as Sysvariable).defaultValue
	}
	
	def generateFollowup(IntentFollowUp followup)
	'''
	"contexts": [
	«if (followup.followupTo !== null)'''"«followup.followupTo.name»-followup"'''»
	],
	"responses": [
				 	{
				 		"resetContexts": false,
				  		"affectedContexts":[
				  		«if(intentsWithFollowup.contains(followup.followupFrom))
				 '''{
				  	"name": "«followup.followupFrom.name»-followup",
				  	"parameters": {},
				  	"lifespan": 2
				  }'''»        
				  ],
				  "action": "",
				  '''

	def CharSequence generateEntityEntries(Entity entity) '''
	[
	«FOR example: entity.example»
	  {
	    "value": "«example.name»",
	    "synonyms": [
	      ""
	    ]
	  }«if (example != entity.example.last) ''','''»
	«ENDFOR»
	]
	'''
	
	
	def CharSequence generateEntity(Entity entity) '''
	{
	  "id": "«generateUUID»",
	  "name": "«entity.name»",
	  "isOverridable": true,
	  "isEnum": false,
	  "isRegexp": false,
	  "automatedExpansion": false,
	  "allowFuzzyExtraction": true
	}
	'''
	def String generateUUID(){
		8.generateId + "-"+ 4.generateId + "-" + 4.generateId + "-" + 4.generateId + "-" + 12.generateId
	} 
	val ALPHA_NUMERIC_STRING = "abcdefghijklmnopqrstuvxyz0123456789"
	def String generateId(int count) {
		var c = count
    	var id = ""
    	while (c-- != 0) {
        	val character = (Math.random() * ALPHA_NUMERIC_STRING.length).intValue
        	id += (ALPHA_NUMERIC_STRING.charAt(character))
    }
   		id
	}
	@Data
	static class IntentFollowUp{
		String name
		//to is the intent which its supposed to follow
		Intent followupTo
		//from is this intent
		Intent followupFrom
		List<Question> question
		List<TrainingRef> training
		Intent superIntent
	}
}