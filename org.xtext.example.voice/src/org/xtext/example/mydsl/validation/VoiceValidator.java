/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.validation;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.voice.Agent;
import org.xtext.example.mydsl.voice.Declaration;
import org.xtext.example.mydsl.voice.Intent;
import org.xtext.example.mydsl.voice.Model;
import org.xtext.example.mydsl.voice.Question;
import org.xtext.example.mydsl.voice.QuestionEntity;
import org.xtext.example.mydsl.voice.VoicePackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class VoiceValidator extends AbstractVoiceValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					VoicePackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
	@Check
	public void checkQuestion(Question question) {
		if(question.getPrompt().isEmpty()) {
			error("Prompt cannot be empty", VoicePackage.Literals.QUESTION__PROMPT);
		}
	}
	@Check
	public void checkDeclaration(Declaration declaration) {
		if(declaration.getTrainingstring().isEmpty()){
			error("Trainingstring cannot be empty", VoicePackage.Literals.DECLARATION__TRAININGSTRING);
		}
	}
	@Check
	public void checkIntent(Intent intent) {
		for(Question question : intent.getQuestion()) {
			if(!intent.getTraining().getTrainingref().contains(question.getQuestionEntity().getWithEntity())) {
				error("Make training phrases for this question", VoicePackage.Literals.INTENT__QUESTION);
			}
		}
	}
	@Check
	public void checkAgentUniquenes(Agent agent) {
		Model model = (Model) agent.eContainer();
		for(Agent item: model.getAgent()) {
			if(agent != item) {
				if(agent.getName().equals(item.getName())){
					String errorString = "Cannot use " + agent.getName() + " again";
					error(errorString, VoicePackage.Literals.AGENT__NAME);
				}
			}
		}
	}
	
	
	
}
