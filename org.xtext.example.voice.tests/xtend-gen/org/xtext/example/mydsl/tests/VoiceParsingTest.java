/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.tests.VoiceInjectorProvider;
import org.xtext.example.mydsl.validation.VoiceValidator;
import org.xtext.example.mydsl.voice.Agent;
import org.xtext.example.mydsl.voice.Intent;
import org.xtext.example.mydsl.voice.Model;
import org.xtext.example.mydsl.voice.Question;
import org.xtext.example.mydsl.voice.QuestionReference;
import org.xtext.example.mydsl.voice.VoicePackage;

@ExtendWith(InjectionExtension.class)
@InjectWith(VoiceInjectorProvider.class)
@SuppressWarnings("all")
public class VoiceParsingTest {
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void T00_loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity car [Toyota, Audi, BMW]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Intent pickCar");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("car with \'what car would you like?\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'i would like a \' (\'Toyota\' is car).");
      _builder.newLine();
      final String result = _builder.toString();
      final Model parse = this._parseHelper.parse(result);
      Assertions.assertNotNull(parse);
      this._validationTestHelper.assertNoErrors(parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void T01_noCyclicInheritance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity car [Toyota, Audi, BMW]");
      _builder.newLine();
      _builder.append("Entity city [Odense, Aarhus, Copenhagen]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Intent pickCar extends pickPlace");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("car with \'what car would you like?\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'i would like a \' (\'Toyota\' is car).");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Intent pickPlace extends pickCar");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("city with \'Where would you like to pick it up??\'");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\'i would pick the car up at \' (\'Odense\' is city).");
      _builder.newLine();
      this.assertCycleInHierarchy(this._parseHelper.parse(_builder), "pickCar");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertCycleInHierarchy(final Model m, final String intentName) {
    this._validationTestHelper.assertError(m, VoicePackage.Literals.MODEL, VoiceValidator.HIERARCHY_CYCLE, (("cycle in hierarchy of intent \'" + intentName) + "\'"));
  }
  
  @Test
  public void T02_testIntentIsCorrectlyNamed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity car [Toyota, Audi, BMW]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Intent pickCar");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("car with \'what car would you like?\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'i would like a \' (\'Toyota\' is car).");
      _builder.newLine();
      final String result = _builder.toString();
      final Model parsed = this._parseHelper.parse(result);
      Assertions.assertTrue(this.checkForIntentName(parsed.getAgent(), "pickCar"));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public boolean checkForIntentName(final List<Agent> agentList, final String name) {
    for (final Agent agent : agentList) {
      if ((agent instanceof Intent)) {
        boolean _equals = ((Intent)agent).getName().equals(name);
        if (_equals) {
          return true;
        }
      }
    }
    return false;
  }
  
  @Test
  public void T03_variableInheritance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity car [Toyota, Audi, BMW]");
      _builder.newLine();
      _builder.append("Entity city [Odense, Aarhus, Copenhagen]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Intent pickCar");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("newcar = car with \'what car would you like?\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'i would like a \' (\'Toyota\' is car).");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Intent pickPlace extends pickCar");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("city with \'Where would you like to pick it up??\'");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("get newcar");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\'i would pick the car up at \' (\'Odense\' is city).");
      _builder.newLine();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void T04_noVariableInheritanceFromOthers() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity car [Toyota, Audi, BMW]");
      _builder.newLine();
      _builder.append("Entity city [Odense, Aarhus, Copenhagen]");
      _builder.newLine();
      _builder.append("Intent pickCar");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("newcar = car with \'what car would you like?\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'i would like a \' (\'Toyota\' is car).");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Intent pickPlace extends pickCar");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("get newcar");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\'i would pick the car up at \' (\'Odense\' is city).");
      _builder.newLine();
      final Model result = this._parseHelper.parse(_builder);
      Assertions.assertTrue(this.checkForInheritedQuestion(result.getAgent()));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void T05_questionsAreNotTheSame() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity car [Toyota, Audi, BMW]");
      _builder.newLine();
      _builder.append("Entity city [Odense, Aarhus, Copenhagen]");
      _builder.newLine();
      _builder.append("Intent pickCar");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("newcar = car with \'what car would you like?\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\'i would like a \' (\'Toyota\' is car).");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Intent pickPlace extends pickCar");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("concertLocal = city with \'What city would you like?\'");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Training:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\'i would pick the car up at \' (\'Odense\' is city).");
      _builder.newLine();
      final Model result = this._parseHelper.parse(_builder);
      Assertions.assertFalse(this.checkForInheritedQuestion(result.getAgent()));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public boolean checkForInheritedQuestion(final List<Agent> agentList) {
    final ArrayList<QuestionReference> intentList = new ArrayList<QuestionReference>();
    for (final Agent agent : agentList) {
      if ((agent instanceof Intent)) {
        EList<QuestionReference> _questions = ((Intent)agent).getQuestions();
        for (final QuestionReference question : _questions) {
          intentList.add(question);
        }
      }
    }
    boolean _xifexpression = false;
    Question _question = intentList.get(0).getQuestion();
    boolean _tripleNotEquals = (_question != null);
    if (_tripleNotEquals) {
      _xifexpression = intentList.get(0).getQuestion().equals(intentList.get(1).getQuestionReference());
    } else {
      _xifexpression = intentList.get(0).getQuestionReference().equals(intentList.get(1).getQuestion());
    }
    return _xifexpression;
  }
}
